import tkinter as tk
from tkinter import messagebox

class TaskManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Task Manager")

        self.tasks = []

        # Crear el frame principal
        self.main_frame = tk.Frame(root)
        self.main_frame.pack(padx=20, pady=20)

        # Etiqueta y entrada para la descripción de la tarea
        tk.Label(self.main_frame, text="Descripción:").grid(row=0, column=0, sticky="w")
        self.description_entry = tk.Entry(self.main_frame, width=30)
        self.description_entry.grid(row=0, column=1, padx=10, pady=5)

        # Etiqueta y entrada para la fecha de vencimiento
        tk.Label(self.main_frame, text="Fecha de Vencimiento:").grid(row=1, column=0, sticky="w")
        self.date_entry = tk.Entry(self.main_frame, width=15)
        self.date_entry.grid(row=1, column=1, padx=10, pady=5)

        # Etiqueta y entrada para la prioridad
        tk.Label(self.main_frame, text="Prioridad:").grid(row=2, column=0, sticky="w")
        self.priority_entry = tk.Entry(self.main_frame, width=15)
        self.priority_entry.grid(row=2, column=1, padx=10, pady=5)

        # Botón para agregar tarea
        tk.Button(self.main_frame, text="Agregar Tarea", command=self.add_task).grid(row=3, column=0, columnspan=2, pady=10)

        # Crear el frame para la lista de tareas
        self.task_list_frame = tk.Frame(root)
        self.task_list_frame.pack(padx=20, pady=10)

        # Crear la lista de tareas
        self.task_listbox = tk.Listbox(self.task_list_frame, width=50, height=10)
        self.task_listbox.pack(side="left", fill="both", expand=True)

        # Scrollbar para la lista de tareas
        self.scrollbar = tk.Scrollbar(self.task_list_frame, orient="vertical")
        self.scrollbar.config(command=self.task_listbox.yview)
        self.scrollbar.pack(side="right", fill="y")

        self.task_listbox.config(yscrollcommand=self.scrollbar.set)

        # Botón para eliminar tarea
        tk.Button(root, text="Eliminar Tarea", command=self.delete_task).pack(pady=5)

    def add_task(self):
        description = self.description_entry.get()
        date = self.date_entry.get()
        priority = self.priority_entry.get()

        if description == "":
            messagebox.showerror("Error", "Por favor, introduce una descripción para la tarea.")
            return

        if date == "":
            messagebox.showerror("Error", "Por favor, introduce una fecha de vencimiento para la tarea.")
            return

        if priority == "":
            messagebox.showerror("Error", "Por favor, introduce una prioridad para la tarea.")
            return

        task = {"description": description, "date": date, "priority": priority}
        self.tasks.append(task)
        self.update_task_list()

        # Limpiar campos de entrada después de agregar la tarea
        self.description_entry.delete(0, tk.END)
        self.date_entry.delete(0, tk.END)
        self.priority_entry.delete(0, tk.END)

    def update_task_list(self):
        self.task_listbox.delete(0, tk.END)
        for i, task in enumerate(self.tasks, start=1):
            self.task_listbox.insert(tk.END, f"{i}. {task['description']} - {task['date']} - {task['priority']}")

    def delete_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            index = selected_index[0]
            del self.tasks[index]
            self.update_task_list()

if __name__ == "__main__":
    root = tk.Tk()
    app = TaskManagerApp(root)
    root.mainloop()
